name: Wails Build

on:
  push:
    branches: [ "main", "master", "develop" ]  # Add any branches you want to trigger builds
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ "main", "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

  # Keep the manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        type: choice
        options: [info, warning, debug]
        default: "warning"
      nsis:
        description: "Create installer"
        type: boolean
        required: true
        default: false
      package: 
        description: "Upload artifacts"
        type: boolean
        required: false
        default: true

jobs:
  build:
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: 'Miru-test'
            platform:  'linux/amd64'
            os: 'ubuntu-ubuntu-24.04'
          - name: 'Miru-test'
            platform:  'windows/amd64'
            os: 'windows-latest'
          - name: 'Miru test'
            platform:  'darwin/universal'
            os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - name: Setup GoLang
        uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version: 1.23.3  

      - name: Cache go modules
        uses: actions/cache@v4
        with:
          # /go/bin is for `go install`-ed tools
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: setup bun.js
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Linux Wails deps
        if:   runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libgtk-3-0 libwebkit2gtk-4.0-dev gcc-aarch64-linux-gnu

      - name: Build Linux App
        if:  runner.os == 'Linux'
        run: |
          echo "building on ${{ matrix.build.platform }}"
          wails build --platform ${{matrix.build.platform}} -webview2 "download" -o '${{matrix.build.name}}'
        shell: bash

      - name: Build MacOS App zipped
        if: runner.os == 'macOS'
        run: |
          echo "building on ${{ matrix.build.platform }}"
          wails build --platform ${{ matrix.build.platform }} -clean
          echo "Zipping application"
          cd build/bin
          ls
          zip -r "${{ matrix.build.name }}-macos.zip" "${{ matrix.build.name }}.app"
        shell: bash

      - name: Build Windows App zipped
        if: runner.os == 'Windows'
        run: |
            echo "building on ${{ matrix.build.platform }}"
            choco install mingw
            wails build --platform ${{ matrix.build.platform }} -clean
            Compress-Archive -Path .\build\bin\${{matrix.build.name}}.exe -DestinationPath .\build\bin\${{matrix.build.name}}-windows-amd64.zip
        shell: powershell

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-linux
          path: build/bin/${{ matrix.build.name }}
        if: runner.os == 'Linux'

      - name: Upload MacOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-macos
          path: build/bin/${{ matrix.build.name }}-macos.zip
        if: runner.os == 'macOS'

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-windows
          path: build/bin/${{matrix.build.name}}-windows-amd64.zip
        if: runner.os == 'Windows'



  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Display structure of downloaded files
        run: ls -R artifacts
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: true
          generate_release_notes: true